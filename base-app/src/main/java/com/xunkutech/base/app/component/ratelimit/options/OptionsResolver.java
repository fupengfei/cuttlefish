/*
 * Copyright (c) 2015 Franjo Žilić <frenky666@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package com.xunkutech.base.app.component.ratelimit.options;

import com.xunkutech.base.app.component.ratelimit.key.KeyGenerator;
import com.xunkutech.base.app.component.ratelimit.options.exception.AmbiguousOptionsException;
import com.xunkutech.base.app.component.ratelimit.options.exception.IllegalConfigurationException;
import com.xunkutech.base.app.component.ratelimit.options.exception.OptionsException;
import org.aspectj.lang.JoinPoint;

/**
 * Interface used to resolve rate limiting configuration for annotated method or type.
 * <p>
 * See implementations for more details.
 * <p>
 *
 * @author franjozilic
 */
public interface OptionsResolver {

    /**
     * Indicated that this {@link OptionsResolver} resolves configuration form a dynamic resource.
     * This means that configuration can be changed without restarting application.
     * <p>
     * {@link Options} caching is disabled for dynamic {@link OptionsResolver}
     *
     * @return true if configuration change can occur in runtime
     */
    boolean isDynamic();

    /**
     * Resolves rate limiting configuration based on key generated by {@link KeyGenerator} and {@link JoinPoint} information.
     * <p>
     * Generated options will be used to determine behaviour when limited method is called
     *
     * @param key       resolved key for rate limited operation provided by {@link KeyGenerator}
     * @param joinPoint actual join point
     * @return options for rate limiting, never null
     * @throws AmbiguousOptionsException     when there is more then one unique option set for key and annotation combination
     * @throws IllegalConfigurationException when resolved configuration is not valid
     */
    Options resolve(String key, JoinPoint joinPoint) throws OptionsException;

    /**
     * Used to determine if this {@link OptionsResolver} supports key generated by {@link KeyGenerator}.
     * It is useful when using more then one {@link OptionsResolver} in a delegating chain.
     * <p>
     * Execution should be as short as possible without need to resolve full {@link Options} when using more then one {@link OptionsResolver}
     *
     * @param key resolved key for rate limited operation
     * @return true if this resolver supports key
     */
    boolean supports(String key);

}
